/**
 * KnowledgeBaseBuilder - Automatic Knowledge Base Generation
 * 
 * Generates structured knowledge bases from crawled website data:
 * - Auto-generates FAQs from content
 * - Extracts contact information and business hours
 * - Creates service/product catalogs
 * - Builds contextual responses with citations
 * - Maintains source attribution for all content
 */

const OpenAI = require('openai');

class KnowledgeBaseBuilder {
    constructor() {
        this.openai = process.env.OPENAI_API_KEY ? new OpenAI({
            apiKey: process.env.OPENAI_API_KEY
        }) : null;
        
        this.contentTypes = {
            faq: 'Frequently Asked Questions',
            service: 'Services and Offerings',
            contact: 'Contact Information',
            hours: 'Business Hours',
            location: 'Location and Directions',
            pricing: 'Pricing Information',
            policy: 'Policies and Terms',
            about: 'About Information'
        };
    }

    /**
     * Build knowledge base from website crawl data
     * @param {Object} crawlResults - Website crawl results
     * @param {Object} businessAnalysis - Business type analysis
     * @param {Object} options - Build options
     * @returns {Object} Structured knowledge base
     */
    async buildFromWebsiteData(crawlResults, businessAnalysis, options = {}) {
        console.log('🧠 Building knowledge base from website data...');
        
        try {
            const knowledgeBase = {
                tenantId: null, // Will be set by caller
                businessType: businessAnalysis.detectedType,
                generatedAt: new Date(),
                version: '1.0',
                autoGenerated: true,
                
                // Main knowledge components
                items: [],
                faqs: [],
                contactInfo: {},
                businessHours: [],
                services: [],
                products: [],
                policies: [],
                
                // Metadata
                sources: [],
                statistics: {
                    totalItems: 0,
                    pagesProcessed: crawlResults.pages?.length || 0,
                    confidence: businessAnalysis.confidence || 0
                }
            };

            // Step 1: Extract and structure basic information
            await this.extractBasicInformation(crawlResults, knowledgeBase);
            
            // Step 2: Generate FAQs
            if (options.generateFAQs !== false) {
                await this.generateFAQs(crawlResults, businessAnalysis, knowledgeBase);
            }
            
            // Step 3: Extract business-specific content
            await this.extractBusinessContent(crawlResults, businessAnalysis, knowledgeBase);
            
            // Step 4: Build searchable knowledge items
            await this.buildKnowledgeItems(knowledgeBase);
            
            // Step 5: Add source tracking
            this.addSourceTracking(crawlResults, knowledgeBase);
            
            // Step 6: Calculate final statistics
            this.calculateStatistics(knowledgeBase);
            
            console.log(`✅ Knowledge base built: ${knowledgeBase.items.length} items, ${knowledgeBase.faqs.length} FAQs`);
            return knowledgeBase;
            
        } catch (error) {
            console.error('❌ Knowledge base building failed:', error);
            throw error;
        }
    }

    /**
     * Build incremental knowledge base update
     * @param {Object} existingKnowledge - Existing knowledge base
     * @param {Object} newCrawlResults - New crawl results
     * @param {Object} changes - Detected changes
     * @returns {Object} Updated knowledge base
     */
    async buildIncremental(existingKnowledge, newCrawlResults, changes) {
        console.log('🔄 Building incremental knowledge base update...');
        
        try {
            const updatedKnowledge = { ...existingKnowledge };
            updatedKnowledge.lastUpdated = new Date();
            updatedKnowledge.version = this.incrementVersion(existingKnowledge.version);
            
            // Track new items
            const newItems = [];
            
            // Process only changed pages
            const changedPages = [
                ...changes.newPages,
                ...changes.modifiedPages
            ];
            
            if (changedPages.length === 0) {
                return updatedKnowledge;
            }
            
            // Build mini knowledge base from changed content
            const miniCrawlResults = {
                ...newCrawlResults,
                pages: changedPages
            };
            
            // Extract new information
            const tempKnowledge = {
                items: [],
                faqs: [],
                contactInfo: {},
                businessHours: [],
                services: [],
                products: []
            };
            
            await this.extractBasicInformation(miniCrawlResults, tempKnowledge);
            
            // Merge new content with existing
            this.mergeKnowledgeContent(updatedKnowledge, tempKnowledge);
            
            // Update statistics
            updatedKnowledge.statistics.lastUpdateItems = tempKnowledge.items.length;
            updatedKnowledge.statistics.totalUpdates = (updatedKnowledge.statistics.totalUpdates || 0) + 1;
            
            updatedKnowledge.newItems = newItems;
            
            return updatedKnowledge;
            
        } catch (error) {
            console.error('❌ Incremental knowledge base update failed:', error);
            throw error;
        }
    }

    /**
     * Extract basic information from crawl results
     * @param {Object} crawlResults - Crawl results
     * @param {Object} knowledgeBase - Knowledge base to populate
     */
    async extractBasicInformation(crawlResults, knowledgeBase) {
        // Extract contact information
        knowledgeBase.contactInfo = this.extractContactInformation(crawlResults);
        
        // Extract business hours
        knowledgeBase.businessHours = this.extractBusinessHours(crawlResults);
        
        // Extract services
        knowledgeBase.services = this.extractServices(crawlResults);
        
        // Extract products/menu items
        knowledgeBase.products = this.extractProducts(crawlResults);
        
        // Extract policies
        knowledgeBase.policies = this.extractPolicies(crawlResults);
    }

    /**
     * Generate FAQs using AI from website content
     * @param {Object} crawlResults - Crawl results
     * @param {Object} businessAnalysis - Business analysis
     * @param {Object} knowledgeBase - Knowledge base to populate
     */
    async generateFAQs(crawlResults, businessAnalysis, knowledgeBase) {
        if (!this.openai) {
            console.log('⚠️ OpenAI not available, generating basic FAQs...');
            knowledgeBase.faqs = this.generateBasicFAQs(crawlResults, businessAnalysis);
            return;
        }

        try {
            // Prepare content for AI analysis
            const contentSummary = this.prepareContentForFAQ(crawlResults, businessAnalysis);
            
            const prompt = `
Based on the following ${businessAnalysis.detectedType} business website content, generate 8-12 realistic FAQ questions and answers that customers would commonly ask.

Business Type: ${businessAnalysis.detectedType}
Website Content Summary:
${contentSummary}

Generate FAQs covering:
- Services/products offered
- Hours and availability  
- Contact and location
- Pricing (if mentioned)
- Policies (if available)
- Process/how it works

Format as JSON array:
[
  {
    "question": "Customer question here?",
    "answer": "Helpful answer with specific details from the website",
    "category": "hours|contact|services|pricing|policy|process",
    "source": "page_name_or_section_where_info_found"
  }
]

Make answers informative and specific to this business. Include relevant details like business name, location, etc.`;

            const response = await this.openai.chat.completions.create({
                model: "gpt-3.5-turbo",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.3,
                max_tokens: 1500
            });

            const generatedFAQs = JSON.parse(response.choices[0].message.content);
            
            // Add metadata to each FAQ
            knowledgeBase.faqs = generatedFAQs.map(faq => ({
                ...faq,
                id: this.generateId(),
                createdAt: new Date(),
                autoGenerated: true,
                confidence: 0.8
            }));

            console.log(`✅ Generated ${knowledgeBase.faqs.length} AI-powered FAQs`);
            
        } catch (error) {
            console.warn('AI FAQ generation failed, using basic FAQs:', error.message);
            knowledgeBase.faqs = this.generateBasicFAQs(crawlResults, businessAnalysis);
        }
    }

    /**
     * Extract business-specific content based on business type
     * @param {Object} crawlResults - Crawl results
     * @param {Object} businessAnalysis - Business analysis
     * @param {Object} knowledgeBase - Knowledge base to populate
     */
    async extractBusinessContent(crawlResults, businessAnalysis, knowledgeBase) {
        const businessType = businessAnalysis.detectedType;
        
        switch (businessType) {
            case 'restaurant':
                await this.extractRestaurantContent(crawlResults, knowledgeBase);
                break;
            case 'clinic':
                await this.extractClinicContent(crawlResults, knowledgeBase);
                break;
            case 'ecommerce':
                await this.extractEcommerceContent(crawlResults, knowledgeBase);
                break;
            case 'service':
                await this.extractServiceContent(crawlResults, knowledgeBase);
                break;
            case 'fitness':
                await this.extractFitnessContent(crawlResults, knowledgeBase);
                break;
            case 'education':
                await this.extractEducationContent(crawlResults, knowledgeBase);
                break;
        }
    }

    /**
     * Build searchable knowledge items from all extracted content
     * @param {Object} knowledgeBase - Knowledge base
     */
    async buildKnowledgeItems(knowledgeBase) {
        const items = [];
        
        // Convert FAQs to knowledge items
        knowledgeBase.faqs.forEach(faq => {
            items.push({
                id: faq.id || this.generateId(),
                type: 'faq',
                category: faq.category || 'general',
                question: faq.question,
                answer: faq.answer,
                keywords: this.extractKeywords(faq.question + ' ' + faq.answer),
                source: faq.source || 'website',
                confidence: faq.confidence || 0.8,
                createdAt: faq.createdAt || new Date(),
                autoGenerated: true
            });
        });
        
        // Add contact information as knowledge items
        if (knowledgeBase.contactInfo.phone) {
            items.push({
                id: this.generateId(),
                type: 'contact',
                category: 'contact',
                question: 'What is your phone number?',
                answer: `You can reach us at ${knowledgeBase.contactInfo.phone}`,
                keywords: ['phone', 'contact', 'call', 'number'],
                source: 'website_contact',
                confidence: 0.9,
                autoGenerated: true
            });
        }
        
        if (knowledgeBase.contactInfo.email) {
            items.push({
                id: this.generateId(),
                type: 'contact',
                category: 'contact',
                question: 'What is your email address?',
                answer: `You can email us at ${knowledgeBase.contactInfo.email}`,
                keywords: ['email', 'contact', 'message'],
                source: 'website_contact',
                confidence: 0.9,
                autoGenerated: true
            });
        }
        
        // Add business hours
        if (knowledgeBase.businessHours.length > 0) {
            items.push({
                id: this.generateId(),
                type: 'hours',
                category: 'hours',
                question: 'What are your business hours?',
                answer: `Our business hours are: ${knowledgeBase.businessHours.join(', ')}`,
                keywords: ['hours', 'open', 'closed', 'time', 'schedule'],
                source: 'website_hours',
                confidence: 0.8,
                autoGenerated: true
            });
        }
        
        // Add services
        knowledgeBase.services.forEach((service, index) => {
            items.push({
                id: this.generateId(),
                type: 'service',
                category: 'services',
                question: `Do you offer ${service.name || service}?`,
                answer: `Yes, we offer ${service.description || service.name || service}${service.price ? ` starting at ${service.price}` : ''}`,
                keywords: this.extractKeywords(service.name || service),
                source: 'website_services',
                confidence: 0.7,
                autoGenerated: true
            });
        });
        
        knowledgeBase.items = items;
    }

    /**
     * Add source tracking for all content
     * @param {Object} crawlResults - Crawl results
     * @param {Object} knowledgeBase - Knowledge base
     */
    addSourceTracking(crawlResults, knowledgeBase) {
        knowledgeBase.sources = crawlResults.pages?.map(page => ({
            url: page.url,
            title: page.title,
            lastCrawled: page.crawledAt,
            wordCount: page.wordCount
        })) || [];
    }

    /**
     * Calculate knowledge base statistics
     * @param {Object} knowledgeBase - Knowledge base
     */
    calculateStatistics(knowledgeBase) {
        knowledgeBase.statistics = {
            ...knowledgeBase.statistics,
            totalItems: knowledgeBase.items.length,
            totalFAQs: knowledgeBase.faqs.length,
            totalServices: knowledgeBase.services.length,
            totalProducts: knowledgeBase.products.length,
            hasContact: Object.keys(knowledgeBase.contactInfo).length > 0,
            hasHours: knowledgeBase.businessHours.length > 0,
            completeness: this.calculateCompleteness(knowledgeBase)
        };
    }

    // Helper methods for content extraction

    extractContactInformation(crawlResults) {
        const contact = {};
        
        // Extract from business info
        const businessInfo = crawlResults.businessInfo || {};
        if (businessInfo.telephone) contact.phone = businessInfo.telephone;
        if (businessInfo.email) contact.email = businessInfo.email;
        if (businessInfo.address) contact.address = businessInfo.address;
        if (businessInfo.name) contact.businessName = businessInfo.name;
        
        // Extract from structured data
        Object.values(crawlResults.structuredData || {}).forEach(dataArray => {
            dataArray.forEach(data => {
                if (data.telephone && !contact.phone) contact.phone = data.telephone;
                if (data.email && !contact.email) contact.email = data.email;
                if (data.address && !contact.address) contact.address = data.address;
                if (data.name && !contact.businessName) contact.businessName = data.name;
            });
        });
        
        return contact;
    }

    extractBusinessHours(crawlResults) {
        const hours = [];
        const businessInfo = crawlResults.businessInfo || {};
        
        if (businessInfo.hours && businessInfo.hours.length > 0) {
            hours.push(...businessInfo.hours.filter(h => h && h.trim()));
        }
        
        // Look for hours patterns in content
        crawlResults.pages?.forEach(page => {
            const content = `${page.title} ${page.content?.body || ''}`.toLowerCase();
            
            // Basic hour patterns
            const hourPatterns = [
                /(\w+day)\s*:?\s*(\d{1,2}:\d{2}\s*[ap]m?\s*-\s*\d{1,2}:\d{2}\s*[ap]m?)/gi,
                /open\s*:?\s*(\d{1,2}:\d{2}\s*[ap]m?\s*-\s*\d{1,2}:\d{2}\s*[ap]m?)/gi,
                /hours\s*:?\s*(\d{1,2}:\d{2}\s*[ap]m?\s*-\s*\d{1,2}:\d{2}\s*[ap]m?)/gi
            ];
            
            hourPatterns.forEach(pattern => {
                const matches = content.match(pattern);
                if (matches) {
                    hours.push(...matches.slice(0, 3)); // Limit to avoid spam
                }
            });
        });
        
        return [...new Set(hours)]; // Remove duplicates
    }

    extractServices(crawlResults) {
        const services = [];
        const businessInfo = crawlResults.businessInfo || {};
        
        // From business info
        if (businessInfo.services) {
            services.push(...businessInfo.services.filter(s => s && s.trim()));
        }
        
        // From page content
        crawlResults.pages?.forEach(page => {
            if (page.businessElements?.services) {
                services.push(...page.businessElements.services.filter(s => s && s.trim()));
            }
        });
        
        // Clean and deduplicate
        return [...new Set(services)]
            .filter(service => service.length > 3 && service.length < 100)
            .slice(0, 20) // Limit services
            .map(service => ({
                name: service,
                description: service
            }));
    }

    extractProducts(crawlResults) {
        const products = [];
        const businessInfo = crawlResults.businessInfo || {};
        
        // From menu/products
        if (businessInfo.menu) {
            products.push(...businessInfo.menu.filter(m => m && m.trim()));
        }
        
        // From page content
        crawlResults.pages?.forEach(page => {
            if (page.businessElements?.menuItems) {
                products.push(...page.businessElements.menuItems.filter(m => m && m.trim()));
            }
        });
        
        // Clean and deduplicate
        return [...new Set(products)]
            .filter(product => product.length > 3 && product.length < 100)
            .slice(0, 30) // Limit products
            .map(product => ({
                name: product,
                description: product
            }));
    }

    extractPolicies(crawlResults) {
        const policies = [];
        
        crawlResults.pages?.forEach(page => {
            const title = (page.title || '').toLowerCase();
            const content = page.content?.body || '';
            
            if (title.includes('privacy') || content.toLowerCase().includes('privacy policy')) {
                policies.push({
                    type: 'privacy',
                    title: 'Privacy Policy',
                    source: page.url
                });
            }
            
            if (title.includes('terms') || content.toLowerCase().includes('terms of service')) {
                policies.push({
                    type: 'terms',
                    title: 'Terms of Service',
                    source: page.url
                });
            }
            
            if (title.includes('refund') || content.toLowerCase().includes('refund policy')) {
                policies.push({
                    type: 'refund',
                    title: 'Refund Policy',
                    source: page.url
                });
            }
        });
        
        return policies;
    }

    // Business-type specific extractors

    async extractRestaurantContent(crawlResults, knowledgeBase) {
        // Add restaurant-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Menu browsing',
            'Reservation assistance',
            'Delivery information',
            'Dietary restrictions help'
        ];
    }

    async extractClinicContent(crawlResults, knowledgeBase) {
        // Add clinic-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Appointment scheduling',
            'Doctor information',
            'Insurance verification',
            'Medical services info'
        ];
    }

    async extractEcommerceContent(crawlResults, knowledgeBase) {
        // Add ecommerce-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Product search',
            'Order tracking',
            'Shipping information',
            'Return policy help'
        ];
    }

    async extractServiceContent(crawlResults, knowledgeBase) {
        // Add service-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Service consultation',
            'Quote requests',
            'Portfolio showcasing',
            'Project inquiries'
        ];
    }

    async extractFitnessContent(crawlResults, knowledgeBase) {
        // Add fitness-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Class scheduling',
            'Membership information',
            'Trainer profiles',
            'Fitness program details'
        ];
    }

    async extractEducationContent(crawlResults, knowledgeBase) {
        // Add education-specific knowledge items
        knowledgeBase.specialFeatures = [
            'Course information',
            'Enrollment assistance',
            'Faculty details',
            'Academic programs'
        ];
    }

    // Utility methods

    generateBasicFAQs(crawlResults, businessAnalysis) {
        const basicFAQs = [
            {
                question: "What services do you offer?",
                answer: "We offer various services. Please check our website for detailed information about our offerings.",
                category: "services",
                source: "auto_generated"
            },
            {
                question: "How can I contact you?",
                answer: "You can find our contact information on our website, including phone numbers and email addresses.",
                category: "contact",
                source: "auto_generated"
            },
            {
                question: "What are your business hours?",
                answer: "Please check our website for current business hours and availability.",
                category: "hours",
                source: "auto_generated"
            }
        ];

        // Add business-type specific FAQs
        const businessType = businessAnalysis.detectedType;
        
        switch (businessType) {
            case 'restaurant':
                basicFAQs.push({
                    question: "Do you offer delivery?",
                    answer: "Please check our website for delivery options and areas we serve.",
                    category: "services",
                    source: "auto_generated"
                });
                break;
            case 'clinic':
                basicFAQs.push({
                    question: "How do I schedule an appointment?",
                    answer: "You can schedule appointments through our website or by calling our office.",
                    category: "services",
                    source: "auto_generated"
                });
                break;
            case 'ecommerce':
                basicFAQs.push({
                    question: "What is your return policy?",
                    answer: "Please check our website for detailed return and exchange policies.",
                    category: "policy",
                    source: "auto_generated"
                });
                break;
        }

        return basicFAQs.map(faq => ({
            ...faq,
            id: this.generateId(),
            createdAt: new Date(),
            autoGenerated: true,
            confidence: 0.6
        }));
    }

    prepareContentForFAQ(crawlResults, businessAnalysis) {
        const pages = crawlResults.pages || [];
        const businessInfo = crawlResults.businessInfo || {};
        
        return `
Business Type: ${businessAnalysis.detectedType}
Business Name: ${businessInfo.name || 'Not specified'}
Contact: ${businessInfo.telephone || ''} ${businessInfo.email || ''}
Address: ${businessInfo.address || ''}

Page Titles: ${pages.map(p => p.title).filter(Boolean).slice(0, 5).join(', ')}
Services: ${businessInfo.services?.slice(0, 10).join(', ') || 'Not specified'}
Menu/Products: ${businessInfo.menu?.slice(0, 10).join(', ') || 'Not specified'}
Hours: ${businessInfo.hours?.slice(0, 3).join(', ') || 'Not specified'}

Key Content: ${pages.map(p => p.description).filter(Boolean).slice(0, 3).join('. ')}
        `.trim();
    }

    extractKeywords(text) {
        if (!text) return [];
        
        return text.toLowerCase()
            .replace(/[^\w\s]/g, ' ')
            .split(/\s+/)
            .filter(word => word.length > 2 && word.length < 20)
            .slice(0, 10);
    }

    generateId() {
        return 'kb_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now().toString(36);
    }

    incrementVersion(version) {
        const parts = version.split('.');
        parts[parts.length - 1] = (parseInt(parts[parts.length - 1]) + 1).toString();
        return parts.join('.');
    }

    mergeKnowledgeContent(existing, newContent) {
        // Merge new items, avoiding duplicates
        const existingIds = new Set(existing.items.map(item => item.question));
        
        newContent.items?.forEach(item => {
            if (!existingIds.has(item.question)) {
                existing.items.push(item);
            }
        });
        
        // Update other content
        if (newContent.contactInfo && Object.keys(newContent.contactInfo).length > 0) {
            Object.assign(existing.contactInfo, newContent.contactInfo);
        }
        
        if (newContent.services?.length > 0) {
            existing.services.push(...newContent.services);
            existing.services = [...new Set(existing.services)];
        }
    }

    calculateCompleteness(knowledgeBase) {
        let score = 0;
        const maxScore = 100;
        
        // Basic info (30 points)
        if (knowledgeBase.contactInfo.businessName) score += 10;
        if (knowledgeBase.contactInfo.phone) score += 10;
        if (knowledgeBase.contactInfo.email) score += 10;
        
        // Content richness (40 points)
        if (knowledgeBase.faqs.length > 0) score += 15;
        if (knowledgeBase.services.length > 0) score += 15;
        if (knowledgeBase.businessHours.length > 0) score += 10;
        
        // Quality indicators (30 points)
        if (knowledgeBase.items.length >= 5) score += 15;
        if (knowledgeBase.sources.length >= 3) score += 15;
        
        return Math.round((score / maxScore) * 100);
    }
}

module.exports = KnowledgeBaseBuilder;
